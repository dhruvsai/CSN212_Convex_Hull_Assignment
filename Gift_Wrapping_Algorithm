//Author Dhruv Pachauri, 13117022, Gift Wrapping algortihm for Convex Hull.

#include <bits/stdc++.h>
using namespace std;
 
#define INF 100005
 
struct Point{
        int x;
        int y;
};
 
int findOrientation(Point p, Point q, Point r){
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
 
    if (val == 0)
        return 0; // colinear
    return (val > 0) ? 1 : 2; // clock or counterclock wise
}
 
void convexHull(Point points[], int n){
    if (n < 3)
        return;
 
    // Initialize Result
    int next[n];
    for (int i = 0; i < n; i++)
        next[i] = -1;
 
    // Find the leftmost point
    int l = 0;
    for (int i = 1; i < n; i++)
        if (points[i].x < points[l].x)
            l = i;
 
    // Start from leftmost point, keep moving counterclockwise
    // until reach the start point again
    int p = l, q;
    do{
      
        q = (p + 1) % n;
        for (int i = 0; i < n; i++)
            if (findOrientation(points[p], points[i], points[q]) == 2)
                q = i;
 
        next[p] = q; // Add q to result as a next point of p
        p = q; // Set p as q for next iteration
    }
    while (p != l);
 	
 	int cnt = 0;
 	
   
    for (int i = 0; i < n; i++){
        if (next[i] != -1){
        	cnt++;
        	cout << "(" << points[i].x << ", " << points[i].y << ")\n";
        }
    }
    
    cout<<"No. of points on Hull : "<<cnt<<endl;
}
 

int main(){
    int n;
	cin>>n;
	
	Point points[n];
	
	for(int i=0; i<n; i++){
		int x, y;
		cin>>x>>y;
		points[i] = {x, y};
	}

    cout << "The points in the convex hull are: \n";
    convexHull(points, n);
    
    return 0;
}
