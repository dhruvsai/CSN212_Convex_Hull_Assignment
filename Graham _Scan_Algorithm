//Author Dhruv Pachauri, 13117022, Graham Scan algorithm
#include <bits/stdc++.h>
using namespace std;
 
struct Point{
    int x, y;
};
 

Point p0;
 
// A utility function to find next to top in a stack
Point nextToTop(stack<Point> &S){
    Point p = S.top();
    S.pop();
    Point res = S.top();
    S.push(p);
    return res;
}
 
int swap(Point &p1, Point &p2){
    Point temp = p1;
    p1 = p2;
    p2 = temp;
}

int SquareDistance(Point p1, Point p2){
    return (p1.x - p2.x)*(p1.x - p2.x) +
          (p1.y - p2.y)*(p1.y - p2.y);
}
 
int findOrientation(Point p, Point q, Point r){
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0;  // collinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}
 

bool compare(const Point& p1, const Point& p2){
  
   int o = findOrientation(p0, p1, p2);
   if (o == 0)
     return (SquareDistance(p0, p2) >=  SquareDistance(p0, p1));
 
   return (o == 2);
}
 

void convexHull(Point points[], int n){
   int ymin = points[0].y, min = 0;
   for (int i = 1; i < n; i++)
   {
     int y = points[i].y;
 
     if ((y < ymin) || (ymin == y &&
         points[i].x < points[min].x))
        ymin = points[i].y, min = i;
   }
 
   swap(points[0], points[min]);

   p0 = points[0];
   sort(points+1, points + n,  compare);
 
   int m = 1; // Initialize size of modified array
   for (int i=1; i<n; i++){
       while (i < n-1 && findOrientation(p0, points[i],
                                    points[i+1]) == 0)
          i++;
 
 
       points[m] = points[i];
       m++;  // Update size of modified array
   }
 
   if (m < 3) return;
 
   stack<Point> S;
   S.push(points[0]);
   S.push(points[1]);
   S.push(points[2]);
 
   // Process remaining n-3 points
   for (int i = 3; i < m; i++){
      while (findOrientation(nextToTop(S), S.top(), points[i]) != 2)
         S.pop();
      S.push(points[i]);
   }
 
   // Now stack has the output points, print contents of stack
   while (!S.empty())
   {
       Point p = S.top();
       cout << "(" << p.x << ", " << p.y <<")" << endl;
       S.pop();
   }
}
 
// Driver program to test above functions
int main(){
	int n;
	cin>>n;
	
    Point points[n];
    
    for(int i=0; i<n; i++){
    	int x, y;
    	cin>>x>>y;
    	points[i] = {x,y};
    }
    convexHull(points, n);
    return 0;
}
